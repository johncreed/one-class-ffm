!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CTC	ffm.h	/^    Vec P, Q, CTC;$/;"	m	class:ImpProblem
CXX	Makefile	/^	CXX = g++$/;"	m
CXX	Makefile	/^CXX = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -Wall -O3 -std=c++0x -march=native$/;"	m
ImpData	ffm.h	/^    ImpData(string file_name): file_name(file_name), l(0), n(0), m(0) {};$/;"	f	class:ImpData
ImpData	ffm.h	/^class ImpData {$/;"	c
ImpDouble	ffm.h	/^typedef double ImpDouble;$/;"	t
ImpFloat	ffm.h	/^typedef double ImpFloat;$/;"	t
ImpInt	ffm.h	/^typedef unsigned int ImpInt;$/;"	t
ImpLong	ffm.h	/^typedef unsigned long int ImpLong;$/;"	t
ImpProblem	ffm.h	/^    ImpProblem(shared_ptr<ImpData> &Tr, shared_ptr<ImpData> &Te,$/;"	f	class:ImpProblem
ImpProblem	ffm.h	/^class ImpProblem {$/;"	c
M	ffm.h	/^    vector<Node> M, N;$/;"	m	class:ImpData
MIN_Z	ffm.h	/^const ImpInt MIN_Z = -10000;$/;"	v
MKLFLAGS	Makefile	/^MKLFLAGS = -m64 -I${MKLROOT}\/include -Wl,--no-as-needed -L${MKLROOT}\/lib\/intel64 -lmkl_intel_lp64 -lmkl_core -lmkl_gnu_thread -lpthread -lm -ldl$/;"	m
MKLROOT	Makefile	/^MKLROOT = \/home\/ybw\/intel\/compilers_and_libraries_2018.2.199\/linux\/mkl$/;"	m
N	ffm.h	/^    vector<Node> M, N;$/;"	m	class:ImpData
Node	ffm.h	/^    Node(): idx(0), val(0) {};$/;"	f	class:Node
Node	ffm.h	/^class Node {$/;"	c
Option	train.cpp	/^struct Option {$/;"	s	file:
P	ffm.h	/^    Vec P, Q, CTC;$/;"	m	class:ImpProblem
Parameter	ffm.h	/^    Parameter():eta(0.1), lambda(1e-5), nr_pass(20), k(4), nr_threads(1), item_bias(true) {};$/;"	f	class:Parameter
Parameter	ffm.h	/^class Parameter {$/;"	c
Q	ffm.h	/^    Vec P, Q, CTC;$/;"	m	class:ImpProblem
QTQ	ffm.cpp	/^void ImpProblem::QTQ(const Vec &C, const ImpLong &l1) {$/;"	f	class:ImpProblem
Te	ffm.h	/^    shared_ptr<ImpData> Tr, Te, Xt;$/;"	m	class:ImpProblem
Tr	ffm.h	/^    shared_ptr<ImpData> Tr, Te, Xt;$/;"	m	class:ImpProblem
U	ffm.h	/^    Vec U, V, gu, gv;$/;"	m	class:ImpProblem
UNAME_S	Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UTX	ffm.cpp	/^void ImpProblem::UTX(shared_ptr<ImpData> &D, Vec &A, Vec &C) {$/;"	f	class:ImpProblem
UTx	ffm.cpp	/^void ImpProblem::UTx(Node* x0, Node* x1, Vec &A, ImpDouble *c) {$/;"	f	class:ImpProblem
V	ffm.h	/^    Vec U, V, gu, gv;$/;"	m	class:ImpProblem
Vec	ffm.h	/^typedef vector<ImpDouble> Vec;$/;"	t
X	ffm.h	/^    vector<Node*> X, Y;$/;"	m	class:ImpData
Xt	ffm.h	/^    shared_ptr<ImpData> Tr, Te, Xt;$/;"	m	class:ImpProblem
Y	ffm.h	/^    vector<Node*> X, Y;$/;"	m	class:ImpData
basename	train.cpp	/^string basename(string path) {$/;"	f
cg	ffm.cpp	/^void ImpProblem::cg(shared_ptr<ImpData> &data, Vec &A, Vec &D, Vec &G) {$/;"	f	class:ImpProblem
eta	ffm.h	/^    ImpFloat eta, lambda;$/;"	m	class:Parameter
file_name	ffm.h	/^    string file_name;$/;"	m	class:ImpData
gd	ffm.cpp	/^void ImpProblem::gd(shared_ptr<ImpData> &data, Vec &A, Vec &C, Vec &D, Vec &G) {$/;"	f	class:ImpProblem
gu	ffm.h	/^    Vec U, V, gu, gv;$/;"	m	class:ImpProblem
gv	ffm.h	/^    Vec U, V, gu, gv;$/;"	m	class:ImpProblem
idx	ffm.h	/^    ImpLong idx;$/;"	m	class:Node
init	ffm.cpp	/^void ImpProblem::init() {$/;"	f	class:ImpProblem
init_mat	ffm.cpp	/^void init_mat(Vec &vec, const ImpLong nr_rows, const ImpLong nr_cols) {$/;"	f
init_va_loss	ffm.cpp	/^void ImpProblem::init_va_loss(ImpInt size) {$/;"	f	class:ImpProblem
inner	ffm.cpp	/^ImpDouble inner(const ImpDouble *p, const ImpDouble *q, const ImpInt k)$/;"	f
is_numerical	train.cpp	/^bool is_numerical(char *str)$/;"	f
item_bias	ffm.h	/^    bool item_bias;$/;"	m	class:Parameter
k	ffm.h	/^    ImpInt k;$/;"	m	class:ImpProblem
k	ffm.h	/^    ImpInt nr_pass, k, nr_threads;$/;"	m	class:Parameter
l	ffm.h	/^    ImpLong l, n, m;$/;"	m	class:ImpData
l	ffm.h	/^    ImpLong l, n, mc, mt;$/;"	m	class:ImpProblem
lambda	ffm.h	/^    ImpDouble loss, reg, lambda, w;$/;"	m	class:ImpProblem
lambda	ffm.h	/^    ImpFloat eta, lambda;$/;"	m	class:Parameter
loss	ffm.h	/^    ImpDouble loss, reg, lambda, w;$/;"	m	class:ImpProblem
m	ffm.h	/^    ImpLong l, n, m;$/;"	m	class:ImpData
main	train.cpp	/^int main(int argc, char *argv[])$/;"	f
mc	ffm.h	/^    ImpLong l, n, mc, mt;$/;"	m	class:ImpProblem
mm	ffm.cpp	/^void mm(const ImpDouble *a, const ImpDouble *b, ImpDouble *c,$/;"	f
model_path	ffm.h	/^    string model_path, predict_path;$/;"	m	class:Parameter
mt	ffm.h	/^    ImpLong l, n, mc, mt;$/;"	m	class:ImpProblem
n	ffm.h	/^    ImpLong l, n, m;$/;"	m	class:ImpData
n	ffm.h	/^    ImpLong l, n, mc, mt;$/;"	m	class:ImpProblem
nr_pass	ffm.h	/^    ImpInt nr_pass, k, nr_threads;$/;"	m	class:Parameter
nr_threads	ffm.h	/^    ImpInt nr_pass, k, nr_threads;$/;"	m	class:Parameter
one_epoch	ffm.cpp	/^void ImpProblem::one_epoch() {$/;"	f	class:ImpProblem
orders	ffm.h	/^    vector<ImpInt> top_k, orders;$/;"	m	class:ImpProblem
param	ffm.h	/^    shared_ptr<Parameter> param;$/;"	m	class:ImpProblem
param	train.cpp	/^    shared_ptr<Parameter> param;$/;"	m	struct:Option	file:
parse_option	train.cpp	/^Option parse_option(int argc, char **argv)$/;"	f
prec_k	ffm.cpp	/^void ImpProblem::prec_k(Vec &z, ImpLong i, vector<ImpInt> &top_k, vector<ImpLong> &hit_counts) {$/;"	f	class:ImpProblem
pred_z	ffm.cpp	/^void ImpProblem::pred_z(ImpLong i, Vec &z) {$/;"	f	class:ImpProblem
predict_path	ffm.h	/^    string model_path, predict_path;$/;"	m	class:Parameter
print_data_info	ffm.cpp	/^void ImpData::print_data_info() {$/;"	f	class:ImpData
print_epoch_info	ffm.cpp	/^void ImpProblem::print_epoch_info(ImpInt t) {$/;"	f	class:ImpProblem
qrsqrt	ffm.cpp	/^ImpDouble qrsqrt(ImpDouble x)$/;"	f
read	ffm.cpp	/^void ImpData::read(bool has_label, ImpLong max_m) {$/;"	f	class:ImpData
reg	ffm.h	/^    ImpDouble loss, reg, lambda, w;$/;"	m	class:ImpProblem
solve	ffm.cpp	/^void ImpProblem::solve() {$/;"	f	class:ImpProblem
te_path	train.cpp	/^    string xc_path, xt_path, tr_path, te_path;$/;"	m	struct:Option	file:
top_k	ffm.h	/^    vector<ImpInt> top_k, orders;$/;"	m	class:ImpProblem
tr_path	train.cpp	/^    string xc_path, xt_path, tr_path, te_path;$/;"	m	struct:Option	file:
train_help	train.cpp	/^string train_help()$/;"	f
transY	ffm.cpp	/^void ImpData::transY(const vector<Node*> &YT) {$/;"	f	class:ImpData
va_loss	ffm.h	/^    Vec va_loss;$/;"	m	class:ImpProblem
val	ffm.h	/^    ImpDouble val;$/;"	m	class:Node
validate	ffm.cpp	/^void ImpProblem::validate() {$/;"	f	class:ImpProblem
w	ffm.h	/^    ImpDouble loss, reg, lambda, w;$/;"	m	class:ImpProblem
xc_path	train.cpp	/^    string xc_path, xt_path, tr_path, te_path;$/;"	m	struct:Option	file:
xt_path	train.cpp	/^    string xc_path, xt_path, tr_path, te_path;$/;"	m	struct:Option	file:
